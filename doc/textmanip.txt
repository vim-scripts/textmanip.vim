*textmanip.txt* Maniplate selected text easily


            .          .
           -|- ,-. . , |- ,-,-. ,-. ,-. . ,-.  >
            |  |-'  X  |  | | | ,-| | | | | |
            `' `-' ' ` `' ' ' ' `-^ ' ' ' |-'
                                          |   < easy manupilation >

Version: 1.8
Author : t9md <taqumd@gmail.com>

==============================================================================
CONTENTS                                                  *textmanip-contents*

Introduction                                          |textmanip-introduction|
Variables                                                 |textmanip-variable|
Mapping                                                    |textmanip-mapping|
Configuration Examples                                    |textmanip-examples|
Use Case                                                   |textmanip-usecase|
Practice                                                  |textmanip-practice|
Detail                                                      |textmanip-detail|
Todo                                                          |textmanip-todo|
Bug                                                            |textmanip-bug|
Changelog                                                |textmanip-changelog|

==============================================================================
INTRODUCTION                                            *textmanip-introduction*

*textmanip* is minimal utility for

  * move visually selected text easily ( linewise / blockwise )
  * duplicate text easily ( linewise / blockwise )
  * count support / keep original cursor pos while moving / duplicating.
  * undo with one 'u' by undojoining.

Requirement:
- Vim 7.3 or later

Latest Version:
http://github.com/t9md/vim-textmanip

                                                              *textmanip-mode*
Textmanip Mode~
Textmanip have two mode.

- insert
  don't overwrite existing text when overrap.

- replace
  overwrite text and restore original text when selected area pass overwitten
  area.

==============================================================================
VARIABLES                                               *textmanip-variables*

*g:textmanip_enable_mappings*
        Default: 0

        If this value is 1, textmanip setup default keymap
        See |textmanip-mapping|.

*g:textmanip_startup_mode*
        Default: 'insert'

        Set 'insert' or 'replace', to specify textmanip act mode.
	Specify textmanip mode at startup.

*g:textmanip_current_mode*
	Default: value of |g:textmanip_startup_mode|.[

	This var store current mode.
	To change current mode, use |:TextmanipToggleMode| or 
	<Plug>(textmanip-toggle-mode).

*g:textmanip_move_ignore_shiftwidth*
        Default: 0

        If you set this to 1. When line move right/left is executed with
        |g:textmanip_move_shiftwidth| value.

*g:textmanip_move_shiftwidth*
        Default: 1

        When you set non zero value to |g:textmanip_move_ignore_shiftwidth|,
        this value is used how much right/left shifted when move right/left.

==============================================================================
MAPPINGS                                                    *textmanip-mappings*

all mappings accept |count| which specify number of 'duplication' or
amount of 'movement'.

n_<Plug>(textmanip-duplicate-down)
v_<Plug>(textmanip-duplicate-down)
    Copy text of current line or visually selected area to 'down' direction.

n_<Plug>(textmanip-duplicate-up)
v_<Plug>(textmanip-duplicate-up)
    Copy text of current line or visually selected area to 'up' direction.

v_<Plug>(textmanip-move-up)
v_<Plug>(textmanip-move-down)
v_<Plug>(textmanip-move-right)
v_<Plug>(textmanip-move-left)

    Move visually selected text to specified direction.

    |linewise| (|v_V| or |v_v| expand multi line)
    move line up/down/left/right.
    When downward move reach EOF, it automatically add empty line to be able
    to across the original EOF.

    |characterwise-visual| (|v_v|)
    |blockwise-visual| (|v_CTRL-V|)
    Move visual selected word or block to up/down/left/right.
    When right direction reach EOL it automatically add one space " " to be
    able to across original EOL.

Always act insert-mode~
Keymap bellow is same as above but asways act as 'insert' mode.

n_<Plug>(textmanip-duplicate-down-i)
v_<Plug>(textmanip-duplicate-down-i)
n_<Plug>(textmanip-duplicate-up-i)
v_<Plug>(textmanip-duplicate-up-i)
v_<Plug>(textmanip-move-up-i)
v_<Plug>(textmanip-move-down-i)
v_<Plug>(textmanip-move-right-i)
v_<Plug>(textmanip-move-left-i)

Always act repalce-mode~
Keymap bellow is same as above but asways act as 'replace' mode.

n_<Plug>(textmanip-duplicate-down-r)
v_<Plug>(textmanip-duplicate-down-r)
n_<Plug>(textmanip-duplicate-up-r)
v_<Plug>(textmanip-duplicate-up-r)
v_<Plug>(textmanip-move-up-r)
v_<Plug>(textmanip-move-down-r)
v_<Plug>(textmanip-move-right-r)
v_<Plug>(textmanip-move-left-r)


Force 1column movement in right/left move~

v_<Plug>(textmanip-move-right-1col)
v_<Plug>(textmanip-move-left-1col)

Toggle Mode between 'insert' and 'replace'~
n_<Plug>(textmanip-toggle-mode)
x_<Plug>(textmanip-toggle-mode)

==============================================================================
FUNCTION						 *textmanip-functions*

textmanip#mode()
	Simply return value of |g:textmanip_current_mode|.
	It could be use to indicate current mode in |'statusline'|.
	                                                                      
==============================================================================
COMMAND                                                     *textmanip-command*

*:TextmanipToggleMode*
        Switch mode between 'insert' and 'replace'.

*:TextmanipToggleIgnoreShiftWidth*
        Toggle whether line move right/left ignore |'shiwftwidth'| or not.

*:TextmanipKickout*
        Split text in two part and aling to each side(right/left).
        To judge side wall, this command use use |'textwidth'|.

==============================================================================
CONFIGURATION EXAMPLE                                      *textmanip-example*

* Macvim~
<D-> is mac COMMAND key.
>
        xmap <D-d> <Plug>(textmanip-duplicate-down)
        nmap <D-d> <Plug>(textmanip-duplicate-down)
        xmap <D-D> <Plug>(textmanip-duplicate-up)
        nmap <D-D> <Plug>(textmanip-duplicate-up)

        xmap <C-j> <Plug>(textmanip-move-down)
        xmap <C-k> <Plug>(textmanip-move-up)
        xmap <C-h> <Plug>(textmanip-move-left)
        xmap <C-l> <Plug>(textmanip-move-right)

        " toggle insert/replace with <F10>
        nmap <F10> <Plug>(textmanip-toggle-mode)
        xmap <F10> <Plug>(textmanip-toggle-mode)

        " use allow key to force replace movement
        xmap  <Up>     <Plug>(textmanip-move-up-r)
        xmap  <Down>   <Plug>(textmanip-move-down-r)
        xmap  <Left>   <Plug>(textmanip-move-left-r)
        xmap  <Right>  <Plug>(textmanip-move-right-r)
<
* gVim~
>
        xmap <M-d> <Plug>(textmanip-duplicate-down)
        nmap <M-d> <Plug>(textmanip-duplicate-down)
        xmap <M-D> <Plug>(textmanip-duplicate-up)
        nmap <M-D> <Plug>(textmanip-duplicate-up)

        xmap <C-j> <Plug>(textmanip-move-down)
        xmap <C-k> <Plug>(textmanip-move-up)
        xmap <C-h> <Plug>(textmanip-move-left)
        xmap <C-l> <Plug>(textmanip-move-right)

        " toggle insert/replace with <F10>
        nmap <F10> <Plug>(textmanip-toggle-mode)
        xmap <F10> <Plug>(textmanip-toggle-mode)

        " use allow key to force replace movement
        xmap  <Up>     <Plug>(textmanip-move-up-r)
        xmap  <Down>   <Plug>(textmanip-move-down-r)
        xmap  <Left>   <Plug>(textmanip-move-left-r)
        xmap  <Right>  <Plug>(textmanip-move-right-r)
<
* vim on terminal~
>
        xmap <Space>d <Plug>(textmanip-duplicate-down)
        nmap <Space>d <Plug>(textmanip-duplicate-down)
        xmap <Space>D <Plug>(textmanip-duplicate-up)
        nmap <Space>D <Plug>(textmanip-duplicate-up)

        xmap <C-j> <Plug>(textmanip-move-down)
        xmap <C-k> <Plug>(textmanip-move-up)
        xmap <C-h> <Plug>(textmanip-move-left)
        xmap <C-l> <Plug>(textmanip-move-right)

        " toggle insert/replace with <F10>
        nmap <F10> <Plug>(textmanip-toggle-mode)
        xmap <F10> <Plug>(textmanip-toggle-mode)
<
==============================================================================
USE CASE                                                   *textmanip-usecase*

* Indent text block
  While editing markdown or vim help file.
  Indenting selected text more easily.

* Duplicate selected text below.
  When you want to call same function multiple time with various
  arguments or create facially resemble code structure by yank and
  paste.
  It is bothersome to "visually select text block" then "yank" then
  "move cursor" then "paste".
  This mini-plugin enables you to simply select text and then "<M-d>" to
  duplicate selected text block to bottom direction.
  Of course, "<M-d>" is my choice, you can assign your favorite key map.

==============================================================================
PRACTICE                                                  *textmanip-practice*

[FIXME] EXPLAIN OR MOVIE

------------------------------------------------------------------------------
Case1~

from
>
        if     (s.line() <= e.line()) && (s.col() <=  e.col()) | let case = 1
        elseif (s.line() >= e.line()) && (s.col() >=  e.col()) | let case = 2
        elseif (s.line() <= e.line()) && (s.col() >=  e.col()) | let case = 3
        elseif (s.line() >= e.line()) && (s.col() <=  e.col()) | let case = 4
        endif
<

to
>
        let case = 
              \ (s.line() <= e.line()) && (s.col() <=  e.col()) ? 1 :
              \ (s.line() >= e.line()) && (s.col() >=  e.col()) ? 2 :
              \ (s.line() <= e.line()) && (s.col() >=  e.col()) ? 3 :
              \ (s.line() >= e.line()) && (s.col() <=  e.col()) ? 4 :
              \ throw
<

------------------------------------------------------------------------------
Case2~

from
>
        if     case ==# 1 | let [u, d, l, r ] = [ s, e, s, e ] 
        elseif case ==# 2 | let [u, d, l, r ] = [ e, s, e, s ] 
        elseif case ==# 3 | let [u, d, l, r ] = [ s, e, e, s ] 
        elseif case ==# 4 | let [u, d, l, r ] = [ e, s, s, e ] 
        endif

to
>
        let [u, d, l, r ] =
              \ case ==# 1 ?  [ s, e, s, e ] :
              \ case ==# 2 ?  [ e, s, e, s ] :
              \ case ==# 3 ?  [ s, e, e, s ] :
              \ case ==# 4 ?  [ e, s, s, e ] :
              \ throw
<
==============================================================================
DETAIL                                                       *textmanip-detail*

Linewise or Blockwise is vary from how you invoked

     * vim-mode - wise map >
     +--------------+--------------+
     | vim-mode     | wise         |
     +--------------+--------------|
     | n            | linewise     |
     | v oneline    | blockwise    |
     | v multiline  | linewise     |
     | C-v          | blockwise    |
     +--------------+--------------+
<
Textmanip support 2 mode: insert, replace

   * INSERT - action table >
   +-----------------+--------------+--------------+
   |  action         | linewise     | blockwise    |
   +-----------------+--------------|--------------|
   | move-up/down    |      o       |      o       |
   | move-right/left |      o       |      o       |
   | dup-up/down     |      o       |      o       |
   | dup-righ/left   |     ????     |   TODO       |
   +-----------------+--------------+--------------+
<
   * REPLACE - action table >
   +-----------------+--------------+--------------+
   |  action         | linewise     | blockwise    |
   +-----------------+--------------|--------------|
   | move-up/down    |      o       |      o       |
   | move-right/left |      o       |      o       |
   | dup-up/down     |      o       |      o       |
   | dup-righ/left   |     N/A      |   TODO       |
   +-----------------+--------------+--------------+
<
==============================================================================
TODO                                                          *textmanip-todo*

- support replace mode [up/down => o] [right/left => o ]: DONE
- duplicate right/left => yet
- duplicate replacemode: DONE
- refactoring( file separate, further oop style) => 80% done
- ?? option to automatically delete trailing space?
- ?? option to automatically indent( I'm not in mood ).
- stabilize, kickout action or delete this action?
- ?? move block or line to ^,$ with one command. I'm not in mood.
- Corner case handling in replace mode( I know its include bug ).

==============================================================================
BUG                                                             *textmanip-bug*

Relatively big count cause error, index out of range.
Will be fixed soon.

When you movement visually selected text to right or left, then |:undo|, cursor
position not restored to original position.

|<Tab>| is treated as 1 char ,so using textmanip in Tab including text destroy
layout.

==============================================================================
CHANGELOG                                                *textmanip-changelog*
2013-11-02: v1.8
        - greatly improve stability. greatly refactored.
        - count and replace move is now stable.
2013-10-30: v1.3
        - [bugfix] error when global var not defined.
2013-10-27: v1.2
        - [bugfix] count not properly handled.
2013-10-26:
        - fix bug when cusuros at BOL and move to left with linewise.
2013-10-24:
        - support blockwise duplication.
2013-10-24: v1.0
        - completely rewriten code, and now suppport blockwise movement
          all direction and undoable!!
          keep cursor pos for all movement.
2013-10-02:
        - just [experiment] new action textmanip-kickout.
2011-12-18:
        - [bugfix] move right or left did '>' twice. should do once.
2011-08-16: v0.7
        - [bugfix] extend_eol not worked in some situation.
2011-08-15: v0.6
        - [bugfix] better handling for redraw problem
2011-08-14: v0.5
        - [bugfix] handle left and up movement limit.
        - [bugfix] more strict check to determine continuous execution.
        - [bugfix] remove unnecessarily `undojoin` twice, and remove
          catch clause(E790)
2011-08-14: v0.4
        - support count for duplicate and move
        - bug fix for `undojoin`
        - refactoring,, support duplicate text to upper direction.
        - change keymap for consistency, sorry.
        - autoloadize!
2011-06-13: v0.3
        - Fix typo
2011-06-13: v0.2
        - Fix typo
2011-03-10: v0.1
        - First release
==============================================================================
vim:tw=78:ts=8:ft=help:norl:
